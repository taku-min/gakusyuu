<!-- /*やっと草の生やし方が分かった。今日からしっかりと学習して遅れを取り戻す。/ -->
<!--/* 2ヶ月も掛かってしまった。-->
<!-- /*今日はrubyの１を学習した。/ -->
<!-- /* 基本をやり直す！-->
<!-- /*11月21日はrubyの変数の値を変更するをやった。-->
<!-- /* 11月22日 変数の定義後に、値を変更をした。-->
<!-- /* 11月23日 変数展開について学習した。-->
<!-- /* 11月24日 今日はif文について学習した。-->
ex  if
      puts
    end
<!-- /* 11月25日 今日は条件分岐について学習した。比較演算子で比較した結果を出力させるものです。-->

<!-- /* 11月26日 今日は比較演算子について学習した。-->
ex  
  a==b  trueは等しければtrue、等しくなければfalse

<!-- /* 11月27日 今日は条件分岐のelseについて学習した。-->
ex
  もし〇〇なら●●を行う、そうでなければ■■を行う
  if
   puts...
  else
   puts...
  end

<!-- /* 11月28日 今日は条件分岐のelsifについて学習した。-->
ex
  もし..だったら..を行う、そうでなくもし..であれば..を行う、いずれでもなければ..を行う
  if
   puts...
  elsif 
   puts...
  else
   puts...
  end

<!-- /* 11月29日 今日は条件分岐の『かつ、または』について学習した。-->
ex 
  かつ＝ &&
  または＝ ||

<!-- /* 11月30日 今日は配列について学習した。
配列は、[値1, 値2, 値3]のように作り、配列に入っているそれぞれの値のことを要素と呼びます。-->


<!-- /* 12月1日 今日は配列のインデックス番号について学習した。
配列の要素には、前から順に「0, 1, 2, ...」と数字が割り振られており、これをインデックス番号といいます。-->

<!-- /* 12月2日 今日は配列と繰り返し処理について学習した。
繰り返し処理には、each文を使います。each文は「配列.each do |変数名|」と書き、「end」までの間に実行したい処理を書く。-->

<-- /* 12月3日 今日はeach文の中の変数について学習した。
each文で各要素が1つずつ代入される|変数|は、doからendまでの間でしか使用することはできない。
each文の外で定義した変数は、each文の中でも使うことができる。変数の使用できる範囲のことをスコープと呼ぶ。-->

<-- /*12月4日 今日はハッシュについて学習しました。
ハッシュはそれぞれの値にキーと呼ばれる名前をつけて管理します。
{キー1 => 値1, キー2 => 値2}のように作ります。 -->

<-- /* 12月5日 今日はハッシュ[キー]= 値について学習した。
ex  user["name"]とすると、ハッシュuserのキー「"name"」と対応している値を用いることができます。 -->

<-- /* 12月6日 今日はハッシュのキーの部分を文字列ではなく、先頭にコロン「:」を付けた書き方をするについて学習した。
この「:name」という書き方のことをシンボルと言う。-->

<-- /* 12月7日 今日もハッシュについて学習した。ハッシュのキーにシンボルを用いるときには、省略した書き方をすることができます。
ex
{"name"=>"tanaka","age"=>21}
{:name=>"tanaka",:age=>21}
{name:"tanaka", age:21}  -->

<-- /* 12月8日 今日もハッシュの存在しないキーを指定について学習した。
ハッシュから存在しないキーの値を取り出した時の「何もない」という値は、Rubyでは「nil」(読み方：ニル)という特別な値で表現されます。 -->

<-- /* 12月9日 今日はハッシュの配列について学習した。 
配列の値がハッシュなので、配列[インデックス番号]で対応するハッシュを用いることができる。-->

<-- /* 12月10日 今日もハッシュの配列について学習した。
配列[インデックス番号][キー]で、特定のハッシュの値を用いることができます。-->

<-- /* 12月11日 今日はeachの中でハッシュの値を使うについて学習した。
ex  exams = [
  {subject: "Math", score: 80},
  {subject: "Science", score: 55}
]
exams.each do |exam|
  puts "#{exam[:subject]}の結果は#{exam[:score]}点です"
end  -->

<-- /* 12月12日 今日はrubyのメソッドについて学習した。
メソッドとは、複数の処理を1つにまとめたもので、「def メソッド名」と「end」の間に、まとめたい処理を書くことでメソッドをつくることができます。
このことを「メソッドを定義する」と言います。-->

<-- /* 12月13日 今日はrubyのメソッドを自作してみました。
ex def print_info
  puts "でんきやへようこそ！"
  puts "今日はヘッドホンを買います！"
end

print_info

<-- /* 12月14日 今日はrubyのメソッド引数について学習した。
引数とはメソッドに与える追加情報のようなものです。
メソッドを呼び出すときに一緒に引数を渡すことで、メソッドの中でその値を利用することができます。 -->

<-- /* 12月15日 今日もrubyのメソッド引数の続きを学習した。
def print_info(item)
  puts "でんきやへようこそ！"
  puts "今日は#{item}がセール中です！"
end

# 引数を「ヘッドホン」としてメソッドを呼び出してください
print_info("ヘッドホン")

# 引数を「テレビ」としてメソッドを呼び出してください
print_info("テレビ")

<-- /* 12月16日 今日もrubyのメソッド引数の複数について学習した。
複数の引数を渡してメソッドを呼び出すには、定義するときと同じように、コンマ(,)を用います。 -->

<-- /* 12月17日 今日はrubyのメソッドの戻り値について学習した。 
戻り値とは呼び出し元で受け取る処理結果のことをいい、このことを「メソッドが戻り値を返す」と言います。
メソッドの中でreturnを使うと、呼び出し元で値を受け取れるようになります。-->

<-- /* 12月18日 今日もrubyのメソッドの戻り値について学習した。
戻り値も引数と同様に、様々な値を用いることができます。
また、if文で使うような条件式をreturnすると、その条件式の結果として得られる真偽値（trueまたはfalse）を返すことができます。  -->

<-- /* 12月19日 今日もrubyのメソッドの戻り値のreturnについて学習した。
returnは、戻り値を返すだけでなく、メソッドの処理を終了させる性質も持っています。 -->

<-- /* 12月20日 今日はrubyのキーワード引数について学習した。
① 定義側で、引数の後にコロンを付ける
② 呼び出し側で、値の前に引数名を書く
とすることで、キーワード引数を持つメソッドを書くことができます。 -->

<-- /* 12月21日 今日はrubyのクラスの定義について学習した。
クラスは「class クラス名」とすることで定義できます。
クラス名は必ず大文字で始めることと、「end」を書く必要があること -->

<-- /* 12月22日 今日はrubyのインスタンス変数について学習した。
クラスのデータを定義する方法の1つに「attr_accessor シンボル」を使う方法があります。
ex  Menuクラスのインスタンスにnameという情報を持たせることができます。このnameという情報のことをインスタンス変数と呼びます。-->

<-- /* 12月23日 今日はrubyのインスタンスの生成について学習した。
クラス（設計図）を元に、新しくインスタンスを生成するには、「クラス名.new」とします。
「変数名 = クラス名.new」とすることで、生成したインスタンスを変数に代入することができます。-->

<-- /* 12月24日 今日はrubyのインスタンスの変数について学習した。
インスタンスに情報をもたせるには、クラスで用意したインスタンス変数に値を代入する必要があり、
具体的には「インスタンス.変数名 = 値」とすることで、そのインスタンス変数に値をセットすることができます。 -->

<-- /* 12月25日 今日はrubyのインスタンスメソッドについて学習した。
クラスの中にメソッドを定義することができます。定義したメソッドは、インスタンスに対して使うようにして呼び出します。
具体的には、「インスタンス.メソッド名」のようにすることで、そのメソッドを呼び出すことができます。 -->

<-- /* 12月26日 今日もrubyのインスタンスメソッドについて学習した。
クラスの中で定義し、インスタンスに対して呼び出すメソッドのことをインスタンスメソッドと呼びます。 -->

<-- /* 12月27日 今日はrubyのメソッドとインスタンス変数について学習した。
インスタンスメソッドの中では、特殊な変数「self」を用いて「self.変数名」とすることで、インスタンス変数を扱うことができるようになります。
インスタンスメソッドでは、変数「self」に、呼び出したインスタンス自身が代入されています。 -->

<-- /* 12月28日 今日はrubyのクラスとインスタンスの復習をした。
クラスは設計図のようなもので、その設計図からつくる実際の「もの」にあたるものがインスタンスという。
インスタンスが持つ情報である「インスタンス変数」と、インスタンスに対して呼び出す「インスタンスメソッド」は、クラスの中で定義します。 -->

<-- /* 12月29日 今日もrubyのinitializeメソッドについて学習した。
initializeメソッドはインスタンスを生成した直後に処理を実行することができる。
initializeメソッドは、「クラス名.new」でインスタンスを生成した直後に自動で呼び出されます。 -->